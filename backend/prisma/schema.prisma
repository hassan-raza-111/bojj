generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  bio              String?
  location         String?
  avatar           String?
  role             Role             @default(CUSTOMER)
  status           UserStatus       @default(ACTIVE)
  emailVerified    Boolean          @default(false)
  phoneVerified    Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lastLoginAt      DateTime?
  loginCount       Int              @default(0)
  adminActions     AdminActionLog[] @relation("AdminActions")
  bids             Bid[]
  sentMessages     ChatMessage[]    @relation("SentMessages")
  chatRooms        ChatRoom[]       @relation("CustomerChatRooms")
  vendorChatRooms  ChatRoom[]       @relation("VendorChatRooms")
  customerProfile  CustomerProfile?
  assignedJobs     Job[]            @relation("AssignedJobs")
  jobs             Job[]
  passwordResets   PasswordReset[]
  customerPayments Payment[]        @relation("CustomerPayments")
  vendorPayments   Payment[]        @relation("VendorPayments")
  refreshTokens    RefreshToken[]
  reviews          Review[]         @relation("UserReviews")
  services         Service[]
  assignedTickets  SupportTicket[]  @relation("AssignedTickets")
  supportTickets   SupportTicket[]
  ticketResponses  TicketResponse[]
  vendorPayouts    VendorPayout[]   @relation("VendorPayouts")
  vendorProfile    VendorProfile?
  notifications    Notification[]   @relation("UserNotifications")

  @@map("users")
}

model VendorProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  companyName   String?
  businessType  String?
  experience    Int?
  skills        String[]
  portfolio     String[]
  verified      Boolean  @default(false)
  documents     String[]
  rating        Float    @default(0)
  totalReviews  Int      @default(0)
  completedJobs Int      @default(0)
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendor_profiles")
}

model CustomerProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  preferredCategories String[]
  budgetRange         String?
  totalJobsPosted     Int      @default(0)
  totalSpent          Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

model Job {
  id                 String        @id @default(uuid())
  title              String
  description        String
  requirements       String[]
  category           String
  subcategory        String?
  tags               String[]
  budget             Float?
  budgetType         BudgetType
  location           String?
  isRemote           Boolean       @default(false)
  deadline           DateTime?
  status             JobStatus     @default(OPEN)
  priority           Priority      @default(MEDIUM)
  customerId         String
  assignedVendorId   String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  additionalRequests String?
  city               String?
  contactPreference  String?
  date               DateTime?
  images             String[]
  state              String?
  street             String?
  time               String?
  timeline           String?
  zipCode            String?
  bidCount           Int           @default(0)
  deletedAt          DateTime?
  deletedBy          String?
  isDeleted          Boolean       @default(false)
  viewCount          Int           @default(0)
  completionDate     DateTime?
  customerFeedback   String?
  customerRating     Float?
  estimatedDuration  String?
  urgency            String?
  // Manual payment tracking fields
  paymentMethod      ManualPaymentMethod?
  paymentReceived    Boolean       @default(false)
  paymentReceivedAt  DateTime?
  paymentNotes       String?
  bids               Bid[]
  chatRooms          ChatRoom?
  analytics          JobAnalytics?
  assignedVendor     User?         @relation("AssignedJobs", fields: [assignedVendorId], references: [id])
  customer           User          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payments           Payment[]
  reviews            Review[]

  @@map("jobs")
}

model Bid {
  id                    String    @id @default(uuid())
  amount                Float
  description           String
  timeline              String
  milestones            Json?
  status                BidStatus @default(PENDING)
  jobId                 String
  vendorId              String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  notes                 String?
  // Negotiation fields
  initialAmount         Float?    // Original bid amount
  currentAmount         Float?    // Latest negotiated amount
  counterOffers         Json?     // Array of counter offers: [{amount, proposedBy, message, createdAt}]
  lastCounteredBy       String?   // "VENDOR" or "CUSTOMER"
  negotiationRound      Int       @default(1)
  maxNegotiationRounds  Int       @default(3)
  negotiationStatus     String?   @default("INITIAL") // INITIAL, NEGOTIATING, AGREED, REJECTED
  job                   Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  vendor                User      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("bids")
}

model Service {
  id          String        @id @default(uuid())
  title       String
  description String
  code        String        @unique
  category    String
  subcategory String?
  tags        String[]
  images      String[]
  basePrice   Float
  priceType   PriceType
  status      ServiceStatus @default(ACTIVE)
  vendorId    String
  parentId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reviews     Review[]
  parent      Service?      @relation("ServiceHierarchy", fields: [parentId], references: [id])
  children    Service[]     @relation("ServiceHierarchy")
  vendor      User          @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Payment {
  id             String        @id @default(uuid())
  amount         Float
  currency       String        @default("USD")
  description    String
  status         PaymentStatus @default(PENDING)
  method         PaymentMethod
  isEscrow       Boolean       @default(true)
  escrowFee      Float         @default(0)
  jobId          String?
  customerId     String
  vendorId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  paidAt         DateTime?
  releasedAt     DateTime?
  netAmount      Float         @default(0)
  paymentMethod  String?
  platformFee    Float         @default(0)
  transactionId  String?
  vendorPayoutId String?
  customer       User          @relation("CustomerPayments", fields: [customerId], references: [id], onDelete: Cascade)
  job            Job?          @relation(fields: [jobId], references: [id])
  vendor         User          @relation("VendorPayments", fields: [vendorId], references: [id], onDelete: Cascade)
  vendorPayout   VendorPayout? @relation("PayoutPayments", fields: [vendorPayoutId], references: [id])

  @@map("payments")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String
  isPublic   Boolean  @default(true)
  reviewerId String
  serviceId  String?
  jobId      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  job        Job?     @relation(fields: [jobId], references: [id])
  reviewer   User     @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  service    Service? @relation(fields: [serviceId], references: [id])

  @@map("reviews")
}

model SupportTicket {
  id           String         @id @default(uuid())
  title        String
  description  String
  category     TicketCategory
  priority     TicketPriority @default(MEDIUM)
  status       TicketStatus   @default(OPEN)
  userId       String
  assignedToId String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resolvedAt   DateTime?
  assignedTo   User?          @relation("AssignedTickets", fields: [assignedToId], references: [id])
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses    TicketResponse[]

  @@map("support_tickets")
}

model TicketResponse {
  id        String   @id @default(uuid())
  ticketId  String
  userId    String
  message   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_resets")
}

model AdminActionLog {
  id         String   @id @default(uuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  admin      User     @relation("AdminActions", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_action_logs")
}

model JobAnalytics {
  id                   String   @id @default(uuid())
  jobId                String   @unique
  timeToFirstBid       Int?
  totalBidCount        Int      @default(0)
  averageBidAmount     Float?
  highestBidAmount     Float?
  lowestBidAmount      Float?
  uniqueViewers        Int      @default(0)
  savedCount           Int      @default(0)
  shareCount           Int      @default(0)
  timeToCompletion     Int?
  customerSatisfaction Float?
  rehireLikelihood     Float?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  job                  Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_analytics")
}

model ChatRoom {
  id         String         @id @default(uuid())
  jobId      String         @unique
  customerId String
  vendorId   String
  status     ChatRoomStatus @default(ACTIVE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  messages   ChatMessage[]
  customer   User           @relation("CustomerChatRooms", fields: [customerId], references: [id], onDelete: Cascade)
  job        Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  vendor     User           @relation("VendorChatRooms", fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("chat_rooms")
}

model ChatMessage {
  id          String      @id @default(uuid())
  chatRoomId  String
  senderId    String
  content     String
  messageType MessageType @default(TEXT)
  isRead      Boolean     @default(false)
  readAt      DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender      User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model VendorPayout {
  id             String       @id @default(uuid())
  vendorId       String
  amount         Float
  currency       String       @default("USD")
  status         PayoutStatus @default(PENDING)
  method         PayoutMethod @default(STRIPE)
  description    String?
  stripePayoutId String?
  adminNotes     String?
  requestedAt    DateTime     @default(now())
  processedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  payments       Payment[]    @relation("PayoutPayments")
  vendor         User         @relation("VendorPayouts", fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_payouts")
}

model Notification {
  id             String           @id @default(uuid())
  userId         String
  type           NotificationType
  title          String
  message        String
  data           Json?
  isRead         Boolean          @default(false)
  readAt         DateTime?
  link           String?
  priority       NotificationPriority @default(MEDIUM)
  emailSent      Boolean          @default(false)
  emailSentAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@map("notifications")
}

enum Role {
  CUSTOMER
  VENDOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
  PENDING_APPROVAL
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  PAID
  IN_ESCROW
  RELEASED
  REFUNDED
  DISPUTED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  BANK_TRANSFER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  DISPUTE
}

enum BudgetType {
  FIXED
  HOURLY
  NEGOTIABLE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PriceType {
  FIXED
  HOURLY
  PER_UNIT
}

enum ChatRoomStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum PayoutStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
  FAILED
}

enum PayoutMethod {
  STRIPE
  BANK_TRANSFER
  PAYPAL
  CHECK
}

enum ManualPaymentMethod {
  CASH
  VENMO
  ZELLE
}

enum NotificationType {
  NEW_BID
  BID_ACCEPTED
  BID_REJECTED
  JOB_ASSIGNED
  JOB_COMPLETED
  JOB_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_RELEASED
  NEW_MESSAGE
  NEW_REVIEW
  ACCOUNT_VERIFIED
  SUPPORT_TICKET_REPLY
  SYSTEM_ALERT
  PAYMENT_REMINDER
  JOB_EXPIRING
  MILESTONE_COMPLETED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
