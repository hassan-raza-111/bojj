generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  bio              String?
  location         String?
  avatar           String?
  role             Role             @default(CUSTOMER)
  status           UserStatus       @default(ACTIVE)
  emailVerified    Boolean          @default(false)
  phoneVerified    Boolean          @default(false)
  lastLoginAt      DateTime?        // Track last login for admin monitoring
  loginCount       Int              @default(0)     // Track login frequency
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  bids             Bid[]
  customerProfile  CustomerProfile?
  assignedJobs     Job[]            @relation("AssignedJobs")
  jobs             Job[]
  passwordResets   PasswordReset[]
  customerPayments Payment[]        @relation("CustomerPayments")
  vendorPayments   Payment[]        @relation("VendorPayments")
  refreshTokens    RefreshToken[]
  reviews          Review[]         @relation("UserReviews")
  services         Service[]
  assignedTickets  SupportTicket[]  @relation("AssignedTickets")
  supportTickets   SupportTicket[]
  vendorProfile    VendorProfile?
  adminActions     AdminActionLog[] @relation("AdminActions")

  @@map("users")
}

model VendorProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  companyName   String?
  businessType  String?
  experience    Int?
  skills        String[]
  portfolio     String[]
  verified      Boolean  @default(false)
  documents     String[]
  rating        Float    @default(0)
  totalReviews  Int      @default(0)
  completedJobs Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendor_profiles")
}

model CustomerProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  preferredCategories String[]
  budgetRange         String?
  totalJobsPosted     Int      @default(0)
  totalSpent          Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

model Job {
  id          String    @id @default(uuid())
  title       String
  description String
  requirements String[]
  
  // Job details
  category    String
  subcategory String?
  tags        String[]
  budget      Float?
  budgetType  BudgetType
  
  // Location & timing
  location    String?
  street      String?
  city        String?
  state       String?
  zipCode     String?
  isRemote    Boolean   @default(false)
  deadline    DateTime?
  
  // Job status
  status      JobStatus @default(OPEN)
  priority    Priority  @default(MEDIUM)
  
  // Customer info
  customerId  String
  customer    User      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Vendor assignment
  assignedVendorId String?
  assignedVendor   User?    @relation("AssignedJobs", fields: [assignedVendorId], references: [id])
  
  // Additional fields for customer module
  timeline    String?
  date        DateTime?
  time        String?
  additionalRequests String?
  contactPreference String?
  images      String[]
  
  // Admin tracking fields
  viewCount   Int       @default(0)
  bidCount    Int       @default(0)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  
  // Enhanced dashboard fields
  estimatedDuration String?  // e.g., "2-3 days", "1 week"
  urgency          String?   // e.g., "Low", "Medium", "High"
  customerRating   Float?     // Rating given by customer after completion
  customerFeedback String?    // Feedback from customer
  completionDate   DateTime?  // When job was actually completed
  
  // Relations
  bids        Bid[]
  payments    Payment[]
  reviews     Review[]
  analytics   JobAnalytics?
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("jobs")
}

model Bid {
  id          String    @id @default(uuid())
  amount      Float
  description String
  timeline    String
  milestones  Json?
  notes       String?   // Additional notes from vendor
  status      BidStatus @default(PENDING)
  jobId       String
  vendorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  vendor      User      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("bids")
}

model Service {
  id          String        @id @default(uuid())
  title       String
  description String
  code        String        @unique
  category    String
  subcategory String?
  tags        String[]
  images      String[]
  basePrice   Float
  priceType   PriceType
  status      ServiceStatus @default(ACTIVE)
  vendorId    String
  parentId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reviews     Review[]
  parent      Service?      @relation("ServiceHierarchy", fields: [parentId], references: [id])
  children    Service[]     @relation("ServiceHierarchy")
  vendor      User          @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  currency    String        @default("USD")
  description String
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod
  isEscrow    Boolean       @default(true)
  escrowFee   Float         @default(0)
  platformFee Float         @default(0)
  netAmount   Float         @default(0)
  jobId       String?
  customerId  String
  vendorId    String
  transactionId String?
  paymentMethod String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  paidAt      DateTime?
  releasedAt  DateTime?
  customer    User          @relation("CustomerPayments", fields: [customerId], references: [id], onDelete: Cascade)
  job         Job?          @relation(fields: [jobId], references: [id])
  vendor      User          @relation("VendorPayments", fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String
  isPublic   Boolean  @default(true)
  reviewerId String
  serviceId  String?
  jobId      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  job        Job?     @relation(fields: [jobId], references: [id])
  reviewer   User     @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  service    Service? @relation(fields: [serviceId], references: [id])

  @@map("reviews")
}

model SupportTicket {
  id           String         @id @default(uuid())
  title        String
  description  String
  category     TicketCategory
  priority     TicketPriority @default(MEDIUM)
  status       TicketStatus   @default(OPEN)
  userId       String
  assignedToId String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resolvedAt   DateTime?
  assignedTo   User?          @relation("AssignedTickets", fields: [assignedToId], references: [id])
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_resets")
}

model AdminActionLog {
  id          String   @id @default(uuid())
  adminId     String
  action      String   // e.g., "APPROVE_VENDOR", "UPDATE_JOB_STATUS"
  targetType  String   // e.g., "USER", "JOB", "PAYMENT"
  targetId    String   // ID of the target entity
  details     Json?    // Additional action details
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  admin       User     @relation("AdminActions", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_action_logs")
}

model JobAnalytics {
  id                String   @id @default(uuid())
  jobId             String   @unique
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  // Performance metrics
  timeToFirstBid    Int?     // Minutes from posting to first bid
  totalBidCount     Int       @default(0)
  averageBidAmount  Float?
  highestBidAmount  Float?
  lowestBidAmount   Float?
  
  // Engagement metrics
  uniqueViewers     Int       @default(0)
  savedCount        Int       @default(0)
  shareCount        Int       @default(0)
  
  // Completion metrics
  timeToCompletion  Int?     // Days from posting to completion
  customerSatisfaction Float? // 1-5 rating
  rehireLikelihood  Float?   // 0-100 percentage
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("job_analytics")
}

enum Role {
  CUSTOMER
  VENDOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  PAID
  IN_ESCROW
  RELEASED
  REFUNDED
  DISPUTED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  BANK_TRANSFER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  DISPUTE
}

enum BudgetType {
  FIXED
  HOURLY
  NEGOTIABLE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PriceType {
  FIXED
  HOURLY
  PER_UNIT
}
